<?php
/**
 * Classe représentant une news, créée à l'occasion d'un TP du tutoriel « La programmation orientée objet en PHP » disponible sur http://www.siteduzero.com/
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class News {

	/**
	 * 
	 * @var array
	 * @access protected
	 */
	protected  $erreurs = array();

	/**
	 * 
	 * @var int
	 * @access protected
	 */
	protected  $id;

	/**
	 * 
	 * @var string
	 * @access protected
	 */
	protected  $auteur;

	/**
	 * 
	 * @var string
	 * @access protected
	 */
	protected  $titre;

	/**
	 * 
	 * @var string
	 * @access protected
	 */
	protected  $contenu;

	/**
	 * 
	 * @var string
	 * @access protected
	 */
	protected  $dateAjout;

	/**
	 * 
	 * @var string
	 * @access protected
	 */
	protected  $dateModif;


	const AUTEUR_INVALIDE = 1;
	const TITRE_INVALIDE = 2;
	const CONTENU_INVALIDE = 3;


	/**
	 * Constructeur de la classe qui assigne les données spécifiées en paramètre aux attributs correspondants.
	 * @access public
	 * @param array $valeurs 
	 * @return void
	 */

	public  function __construct($valeurs = array()) {
		if(!empty($valeurs)){
			$this->hydrate($valeurs);
		}
	}


	/**
	 * Méthode assignant les valeurs spécifiées aux attributs correspondant.
	 * @access public
	 * @param array $donnees 
	 * @return void
	 */

	public  function hydrate($donnees) {
		foreach ($donnees as $attribut => $valeur) {
			$methode = 'set'.ucfirst($attribut);

			if (is_callable(array($this, $methode))){
				$this->$methode($valeur);
			}
		}
	}


	/**
	 * Méthode permettant de savoir si la news est nouvelle.
	 * @access public
	 * @return bool const
	 */

	public  function isNew() {
		// renvoie true si $this->id n'est pas défini
		return empty($this->id);
	}


	/**
	 * Méthode permettant de savoir si la news est valide.
	 * @access public
	 * @return bool const
	 */

	public  function isValid() {
		return !(empty($this->auteur) || empty($this->titre) || empty($this->contenu));
	}


	/**
	 * SETTERS
	 * @access public
	 * @param int $id 
	 * @return void
	 */

	public  function setId($id) {
		$this->id = (int) $id;
	}


	/**
	 * @access public
	 * @param string $auteur 
	 * @return void
	 */

	public  function setAuteur($auteur) {
		if(!is_string($auteur)||empty($auteur)){
			$this->erreurs[] = self::AUTEUR_INVALIDE;
		}
		else{
			$this->auteur = $auteur;
		}
	}


	/**
	 * @access public
	 * @param string $titre 
	 * @return void
	 */

	public  function setTitre($titre) {
		if(!is_string($titre)||empty($titre)){
			$this->erreurs[] = self::TITRE_INVALIDE;
		}
		else{
			$this->titre = $titre;
		}
	}


	/**
	 * @access public
	 * @param string $contenu 
	 * @return void
	 */

	public  function setContenu($contenu) {
		if(!is_string($contenu)||empty($contenu)){
			$this->erreurs[] = self::CONTENU_INVALIDE;
		}
		else{
			$this->contenu = $contenu;
		}
	}


	/**
	 * @access public
	 * @param string $dateAjout 
	 * @return void
	 */

	public  function setDateAjout($dateAjout) {
		if (is_string($dateAjout)&&preg_match('`le [0-9]{2}/[0-9]{2}/[0-9]{4} à [0-9]{2}h[0-9]{2}`', $dateAjout)) {
			$this->dateAjout = $dateAjout;
		}
	}


	/**
	 * @access public
	 * @param string $dateModif 
	 * @return void
	 */

	public  function setDateModif($dateModif) {
		if (is_string($dateModif)&&preg_match('`le [0-9]{2}/[0-9]{2}/[0-9]{4} à [0-9]{2}h[0-9]{2}`', $dateModif)) {
			$this->dateModif = $dateModif;
		}
	}


	/**
	 * GETTERS
	 * @access public
	 * @return array const
	 */

	public  function erreurs() {
		return $this->erreurs;
	}


	/**
	 * @access public
	 * @return array const
	 */

	public  function id() {
		return $this->id;
	}


	/**
	 * @access public
	 * @return string const
	 */

	public  function auteur() {
		return $this->auteur;
	}


	/**
	 * @access public
	 * @return string const
	 */

	public  function titre() {
		return $this->titre;
	}


	/**
	 * @access public
	 * @return string const
	 */

	public  function contenu() {
		return $this->contenu;
	}


	/**
	 * @access public
	 * @return string const
	 */

	public  function dateAjout() {
		return $this->dateAjout;
	}


	/**
	 * @access public
	 * @return string const
	 */

	public  function dateModif() {
		return $this->dateModif;
	}


}
?>